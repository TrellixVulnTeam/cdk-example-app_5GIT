[tool.poetry]
name = "cdk-example-app"
version = "0.1.0"
description = "AWS CDK Python experiments"
authors = ["houbie <ivo@houbrechts-it.be>"]

[tool.poetry.dependencies]
python = "^3.8"
aws-lambda-powertools = "^1.9.1"
pynamodb = "^5.0.0"
Flask = "^1.1.2"
connexion = {extras = ["swagger-ui"], version = "^2.7.0"}
requests = "^2.25.1"
opentelemetry-instrumentation-botocore = "^0.22b0"
opentelemetry-instrumentation-flask = "^0.22b0"
opentelemetry-instrumentation-requests = "^0.22b0"
opentelemetry-propagator-b3 = "^1.3.0"
opentelemetry-sdk = "^1.3.0"
serverless-wsgi = "^1.7.7"
Werkzeug = "^1.0.1"

[tool.poetry.dev-dependencies]
boto3 = "^1.16.43"
boto3-stubs = { extras = [
    "s3",
    "lambda",
    "stepfunctions",
    "dynamodb",
    "sqs",
], version = "^1.17.90" }
pytest = "^6.2.1"
pytest-mock = "^3.5.1"
locust = "^1.4.1"
pytest-dynamodb = "^2.0.1"
mypy = "^0.902"
# idealy pylint should not be in here, but it is required by the intellij plugin
pylint = "^2.10.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.pylint.format]
max-line-length = 120
variable-rgx = '^[a-z_][a-z0-9_]*$'
attr-rgx = '^[a-z_][a-z0-9_]*$'
argument-rgx = '^[a-zA-Z0-9_]*$'

[tool.pylint.messages_control]
disable = [
    # Disable failure for TODOs in the codebase (code will always have TODOs).
    "fixme",
    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",
    # Too much false positives for too-many-arguments
    "too-many-arguments",
    # Too much false positives for too-few-public-methods
    "too-few-public-methods"
]

[tool.wraptor]
poetry = "poetry==1.1.11"
pre-commit = "pre-commit"
black = "black==21.7b0"
isort = "isort==5.9.3"
flake8 = """flake8==3.9.2
 flake8-bugbear
 flake8-implicit-str-concat
 flake8-builtins
 pep8-naming
 flake8-comprehensions
 flake8-bandit
 flake8-pytest-style
 flake8-eradicate
 flake8-mutable
 flake8-type-checking
"""
# install the current directory as local package together with ipykernel
# pw caches tool venvs based on the pip instal arguments,
# so we use '../cdk-example-app' in stead of '.' to create a project specific venv with ipykernel and this project installed in
ipykernel = "ipykernel ../cdk-example-app"
jupyter = "jupyter"

[tool.wraptor.alias]
check-black = "black src tests --check"
check-flake8 = "flake8 src tests"
check-pylint = "poetry run pylint src tests"
env = "poetry env info"
flask = "poetry run python -m tests.local_flask"
outdated = "poetry show --outdated"
test = "poetry run pytest"
export-requirements = "poetry export --without-hashes -f requirements.txt -o generated/requirements.txt --with-credentials"
generate-app-info = "poetry run generate-app-info"

# the 'ipykernel:' prefix makes sure that the command is executed in the ipykernel virtual environment
installkernel = "ipykernel:python -m ipykernel install --name=cdk-example-app"
nb = "jupyter notebook"
